[input]
ClusterConfigFile = conf/config_clustering.ini
keysets_dir = data/keyModelsData
FeedbackImportQuery= conf/Query_DataImport_Feedback_Alternate.txt
WhitelistedIPs_File = conf/Whitelisted_IPs.csv
blacklisted_keys_current_log = data/keyBlacklistLog/blacklisted_keys_current.csv
blacklisted_keys_all_log = data/keyBlacklistLog/blacklisted_keys_all.csv
SizeSelectorAndIterationFile = data/keyBlacklistLog/IterationAndSizeSelected.csv
CurrentStatusReport = data/CurrentStatusReport/AdaptiveAlgo/CurrentStatusReport|_|


[log_creation]
log_directory_modclust = data/logs/ModClustLog|_|
log_directory_envcontrol = data/logs/ExecutorLog|_|


[input_transformer]
BlacklistedStatusByOther = TrueByOther
BlacklistedStatusByThisModule = TrueByThis
## These Status is used in blacklisted status when key is blocked by this or any other module


[env]
BinSizeBasedOnPeriod_inhr = 24
## i.e. size of the grouping methodology, another way to put this is that the traffic will be grouped based on the timestamps, and here this value represent those group size/ period size 

UseStaticOrDynamicCurrentDay = dynamic
## 'dynamic': use current_day as the actual current time; 'static': use current_day as the one which is feeded
##Alternative1 == static## more coarse
sid = 3841
current_day = 270318
feedback_eval_window = 8
# days, windows include current day should be int >= 1
##Alternative2 == dynamic
SIDs = ['3841']
FeedbackDataGrabWindow_inhr = 120
## i.e. to grab data between current to THIS many hours back

feedback_setting = all
## Options: all, onlythis
## Feedback to use: if all, get the feedback for all the Keys that are present in the dataset; if onlythis get feedback for only those observation that has been blacklisted by this module.
KeySelectorToUse = MostRecentInTimFrame
## Options: RandInTimFrame, MostRecentInTimFrame
## Defines the method in selecting the keys, 
## MostRecentInTimFrame: selelct the keys in the order from most recent to older from the IPs which are present in the time frame and from each clusters
## RandInTimFrame: selects the key from a cluster of IPs present within the time frame, randomly
 
[blacklister_limit]
IPsMinLimit = 5
IPsMaxLimit = 100
# This is per iteration based
IPsToBlockInTheTimeFrameFromCurrent_inhr = 10
# In hrs, For selecting keys which were present with in the time frame to current
# TimeStamp Folled by a sid may be different then the Time Stamp used by this machine, hence adding 10 hr extra


[business_limit]
max_captcha_solved_per_day = 30
TimeBwEachIteration = 30
## in min, No. of time feedback will be checked and also will be run per day
TuningCoefficient = 0.75
## Coefficient to increase the aggressiveness. it works as multiplier. use 1


[bq_cred]
project_id = ss-production-storage
# xxxxxxxxxxxxx


[blacklister_cred]
ttl = 10800
# TTL for Key, 3600 = 1hr, 10800 = 3hr
rule_failed = r2
# options 
reason_code = 8
action = 1
calltype = 1
# options
type = ip
rcauto = true
source = project_x
authkey = scghn
rule_name = ML01
version = 1.0.0
description = ML_MODEL


[rotom_cred]
; 1- suggests rotom is listening on kafka and 2 - suggests rotom is listening on redis
rotom_listening_on = 1
rotomredishost = 127.0.0.1
rotomredisport = 6379
rotomredispwd = redis@123@Azure
kafka_bootstrap_servers = kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092
kafka_prod_rotom_topic = blacklister

